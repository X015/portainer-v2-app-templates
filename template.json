{
    "version": "2",
    "templates": [
        {
            "title": "Adguardhome-sync",
            "name": "adguardhome-sync",
            "image": "linuxserver/adguardhome-sync",
            "description": "Adguardhome-sync is a tool to synchronize AdGuardHome config to replica instances.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/adguardhome-sync"
                }
            ],
            "env": [
                {
                    "name": "TZ",
                    "default": "Europe/Vienna",
                    "description": "Specify a timezone to use",
                    "label": ""
                },
                {
                    "name": "PUID",
                    "default": "1000",
                    "description": "User ID to run as "
                },
                {
                    "name": "PGID",
                    "default": "1000",
                    "description": "Group ID to run as"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/adguardhomesync-icon.png?token=ANVETBEMUC4XHER3MLLTQ7LBFXLSG",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Airsonic",
            "name": "airsonic",
            "image": "linuxserver/airsonic",
            "description": "Airsonic is a free, web-based media streamer, providing ubiquitious access to your music.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "4040:4040/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/airsonic"
                },
                {
                    "container": "/music",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/music"
                },
                {
                    "container": "/playlists",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/playlists"
                },
                {
                    "container": "/podcasts",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/podcasts"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/airsonic-banner.png?token=ANVETBBS354MEUT4HJ3GI6TBFXMXO",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Apprise API",
            "name": "apprise-api",
            "image": "linuxserver/apprise-api",
            "description": "Apprise-api Takes advantage of Apprise through your network with a user-friendly API.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "8000:8000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/apprise-api"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/apprise-api.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Audacity",
            "name": "audacity",
            "image": "linuxserver/audacity",
            "description": "Audacity is an easy-to-use, multi-track audio editor and recorder. Developed by a group of volunteers as open source.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/audacity"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/audacity-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Babybuddy",
            "name": "babybuddy",
            "image": "linuxserver/babybuddy",
            "description": "Babybuddy is a buddy for babies! Helps caregivers track sleep, feedings, diaper changes, tummy time and more to learn about and predict baby's needs without (as much) guess work.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "8000:8000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/babybuddy"
                }
            ],
            "env": [
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/babybuddy-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Bazarr",
            "name": "bazarr",
            "image": "linuxserver/bazarr",
            "description": "Bazarr is a companion application to Sonarr and Radarr. It can manage and download subtitles based on your requirements.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "6767:6767/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/bazarr"
                },
                {
                    "container": "/movies",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/movies"
                },
                {
                    "container": "/tv",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/bazarr.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Beets",
            "name": "beets",
            "image": "linuxserver/beets",
            "description": "Beets is a music library manager and not, for the most part, a music player.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "8337:8337/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/beets"
                },
                {
                    "container": "/music",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/music"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/beets-icon.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "BOINC",
            "name": "boinc",
            "image": "linuxserver/boinc",
            "description": "BOINC is a platform for high-throughput computing on a large scale (thousands or millions of computers). It can be used for volunteer computing (using consumer devices) or grid computing (using organizational resources). It supports virtualized, parallel, and GPU-based applications.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/boinc"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "PASSWORD",
                    "default": "",
                    "description": "optional"
                }
            ],
            "devices": [
                {
                    "container": "/dev/dri",
                    "host": "/dev/dri"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/BOINC_logo.svg.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Booksonic-Air",
            "name": "booksonic-air",
            "image": "linuxserver/booksonic-air",
            "description": "Booksonic-air is a platform for accessing the audibooks you own wherever you are. At the moment the platform consists of Booksonic Air - A server for streaming your audiobooks, successor to the original Booksonic server and based on Airsonic. Booksonic App - An DSub based Android app for connection to Booksonic-Air servers.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "4040:4040/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/booksonic"
                },
                {
                    "container": "/audiobooks",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/audiobooks"
                },
                {
                    "container": "/podcast",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/podcasts"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/booksonic.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Calibre",
            "name": "calibre",
            "image": "linuxserver/calibre",
            "description": "Calibre is a powerful and easy to use e-book manager. Users say it’s outstanding and a must-have. It’ll allow you to do nearly everything and it takes things a step beyond normal e-book software. It’s also completely free and open source and great for both casual users and computer experts.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp",
                "8081:8081/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/calibre"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "PASSWORD",
                    "default": "",
                    "description": "optional"
                },
                {
                    "name": "CLI_ARGS",
                    "default": "",
                    "description": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/calibre.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Calibre-Web",
            "name": "calibre-web",
            "image": "linuxserver/calibre-web",
            "description": "Calibre-web is a web app providing a clean interface for browsing, reading and downloading eBooks using an existing Calibre database. It is also possible to integrate google drive and edit metadata and your calibre library through the app itself.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "8083:8083/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/calibre-web"
                },
                {
                    "container": "/books",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/calibre"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/calibre-web-icon.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Code-Server",
            "name": "code-server",
            "image": "linuxserver/code-server",
            "description": "Code-server is VS Code running on a remote server, accessible through the browser.",
            "platform": "linux",
            "ports": [
                "8443:8443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/code-server"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "PASSWORD",
                    "default": "password",
                    "description": "optional"
                },
                {
                    "name": "HASHED_PASSWORD",
                    "default": "",
                    "description": "optional"
                },
                {
                    "name": "SUDO_PASSWORD",
                    "default": "",
                    "description": "optional"
                },
                {
                    "name": "SUDO_PASSWORD_HASH",
                    "default": "",
                    "description": "optional"
                },
                {
                    "name": "PROXY_DOMAIN",
                    "default": "code-server.my.domain",
                    "description": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/code-server.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "COPS",
            "name": "cops",
            "image": "linuxserver/cops",
            "description": "COPS links to your Calibre library database and allows downloading and emailing of books directly from a web browser and provides a OPDS feed to connect to your devices.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/cops"
                },
                {
                    "container": "/books",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/calibre"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/cops-icon.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Couchpotato",
            "name": "couchpotato",
            "image": "linuxserver/couchpotato",
            "description": "Couchpotato is an automatic NZB and torrent downloader. You can keep a movies I want list and it will search for NZBs/torrents of these movies every X hours. Once a movie is found, it will send it to SABnzbd or download the torrent to a specified directory.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "5050:5050/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/couchpotato"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/movies",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/movies"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/couchpotato.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Daapd",
            "name": "daapd",
            "image": "linuxserver/daapd",
            "description": "Daapd (iTunes) media server with support for AirPlay devices, Apple Remote (and compatibles), Chromecast, MPD and internet radio.",
            "platform": "linux",
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/daapd"
                },
                {
                    "container": "/music",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/music"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/daapd-logo.png",
            "network_mode": "host",
            "type": 1
        },
        {
            "title": "Darktable",
            "name": "darktable",
            "image": "linuxserver/darktable",
            "description": "Darktable is an open source photography workflow application and raw developer. A virtual lighttable and darkroom for photographers. It manages your digital negatives in a database, lets you view them through a zoomable lighttable and enables you to develop raw images and enhance them.",
            "platform": "linux",
            "note": "The application can be accessed at:\n\n-  http://yourhost:3000/\n\nBy default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:\n\n- http://yourhost:3000/?login=true\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/darktable"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/darktable-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Davos",
            "name": "davos",
            "image": "linuxserver/davos",
            "description": "Davos is an FTP automation tool that periodically scans given host locations for new files. It can be configured for various purposes, including listening for specific files to appear in the host location, ready for it to download and then move, if required. It also supports completion notifications as well as downstream API calls, to further the workflow.",
            "platform": "linux",
            "ports": [
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/davos"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/davos.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "DDClient",
            "name": "ddclient",
            "image": "linuxserver/ddclient",
            "description": "Ddclient is a Perl client used to update dynamic DNS entries for accounts on Dynamic DNS Network Service Provider. It was originally written by Paul Burry and is now mostly by wimpunk. It has the capability to update more than just dyndns and it can fetch your WAN-ipaddress in a few different ways.",
            "platform": "linux",
            "note": "Get dynamic IP from Fritz.Box\n\nIf ddclient shall fetch the dynamic (public) IP-address from a fritz.box (AVM) add the following line to /config/ddclient.conf:\n\nuse=cmd, cmd=/etc/ddclient/get-ip-from-fritzbox",
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/ddclient"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/ddclient-logo.png",
            "network_mode": "host",
            "type": 1
        },
        {
            "title": "Deluge",
            "name": "deluge",
            "image": "linuxserver/deluge",
            "description": "Deluge is a lightweight, Free Software, cross-platform BitTorrent client.",
            "platform": "linux",
            "note": "The admin interface is available at http://SERVER-IP:8112 with a default user/password of admin/deluge.\n\nTo change the password (recommended) log in to the web interface and go to Preferences->Interface->Password.\n\nChange the downloads location in the webui in Preferences->Downloads and use /downloads for completed downloads.\n\nChange the inbound port to 6881 (or whichever port you've mapped for the container) under Preferences->Network, otherwise random ports will be used.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8112:8112/tcp",
                "6881:6881/tcp",
                "6881:6881/udp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/deluge"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "DELUGE_LOGLEVEL",
                    "default": "error",
                    "description": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/deluge-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "digiKam",
            "name": "digikam",
            "image": "linuxserver/digikam",
            "description": "digiKam: Professional Photo Management with the Power of Open Source",
            "platform": "linux",
            "note": "The application can be accessed at:\n\nhttp://yourhost:3000/ By default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:\n\nhttp://yourhost:3000/?login=true",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/digikam"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/digikam.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Dillinger",
            "name": "dillinger",
            "image": "linuxserver/dillinger",
            "description": "Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor.",
            "platform": "linux",
            "note": "Access the webui at http://your-ip:8080 , keep in mind that storage for this application is in your browser session not server side. Only plugin configurations will ever be stored server side.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/dillinger"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/dillinger.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "DokuWiki",
            "name": "dokuwiki",
            "image": "linuxserver/dokuwiki",
            "description": "Dokuwiki is a simple to use and highly versatile Open Source wiki software that doesn't require a database. It is loved by users for its clean and readable syntax. The ease of maintenance, backup and integration makes it an administrator's favorite. Built in access controls and authentication connectors make DokuWiki especially useful in the enterprise context and the large number of plugins contributed by its vibrant community allow for a broad range of use cases beyond a traditional wiki.",
            "platform": "linux",
            "note": "Upon first install go to http://$IP:$PORT/install.php once you have completed the setup, restart the container, login as admin and set \"Use nice URLs\" in the admin/Configuration Settings panel to .htaccess and tick Use slash as namespace separator in URLs to enable nice URLs you will find the webui at http://$IP:$PORT/, for more info see Dokuwiki",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp",
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/dokuwiki"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/dokuwiki-icon.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Domoticz",
            "name": "domoticz",
            "image": "linuxserver/domoticz",
            "description": "Domoticz is a Home Automation System that lets you monitor and configure various devices like: Lights, Switches, various sensors/meters like Temperature, Rain, Wind, UV, Electra, Gas, Water and much more. Notifications/Alerts can be sent to any mobile device.",
            "platform": "linux",
            "note": "To configure Domoticz, go to the IP of your docker host on the port you configured (default 8080), and add your hardware in Setup > Hardware. The user manual is available at www.domoticz.com",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp",
                "6144:6144/tcp",
                "1443:1443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/domoticz"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "WEBROOT",
                    "default": "domoticz",
                    "label": "optional"
                }
            ],
            "devices": [
                {
                    "container": "/path/to/device",
                    "host": "/path/to/device"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/domoticz.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Double Commander",
            "name": "doublecommander",
            "image": "linuxserver/doublecommander",
            "description": "Double Commander is a free cross platform open source file manager with two panels side by side. It is inspired by Total Commander and features some new ideas.",
            "platform": "linux",
            "note": "The application can be accessed at:\n\n    http://yourhost:3000/\n\nBy default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:\n\n    http://yourhost:3000/?login=true\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/doublecommander"
                },
                {
                    "container": "/data",
                    "bind": "/"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/doublecommander-icon.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "DuckDNS",
            "name": "duckdns",
            "image": "linuxserver/duckdns",
            "description": "Duckdns is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence.",
            "platform": "linux",
            "note": "\n    Go to the duckdns website, register your subdomain(s) and retrieve your token\n    Create a container with your subdomain(s) and token\n    It will update your IP with the DuckDNS service every 5 minutes\n",
            "restart_policy": "unless-stopped",
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/duckdns"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "SUBDOMAINS",
                    "default": "subdomain1,subdomain2"
                },
                {
                    "name": "TOKEN",
                    "default": "token"
                },
                {
                    "name": "LOG_FILE",
                    "default": "false",
                    "label": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/duckdns.png",
            "network_mode": "host",
            "type": 1
        },
        {
            "title": "Duplicati",
            "name": "duplicati",
            "image": "linuxserver/duplicati",
            "description": "Duplicati works with standard protocols like FTP, SSH, WebDAV as well as popular services like Microsoft OneDrive, Amazon Cloud Drive & S3, Google Drive, box.com, Mega, hubiC and many others.\n\nduplicati",
            "platform": "linux",
            "note": "The webui is at <your ip>:8200 , create backup jobs etc via the webui, for local backups select /backups as the destination. For more information see Duplicati.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8200:8200/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/duplicati"
                },
                {
                    "container": "/backups",
                    "bind": "/path/to/backups"
                },
                {
                    "container": "/source",
                    "bind": "/path/to/source"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000",
                    "label": ""
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/duplicati-icon.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Emby",
            "name": "emby",
            "image": "linuxserver/emby",
            "description": "Emby organizes video, music, live TV, and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone emby Media Server.",
            "platform": "linux",
            "note": "Webui can be found at http://<your-ip>:8096\n\nEmby has very complete and verbose documentation located here .\n\nHardware acceleration users for Intel Quicksync and AMD VAAPI will need to mount their /dev/dri video device inside of the container by passing the following command when running or creating the container:\n\n--device=/dev/dri:/dev/dri\n\nWe will automatically ensure the abc user inside of the container has the proper permissions to access this device.\n\nHardware acceleration users for Nvidia will need to install the container runtime provided by Nvidia on their host, instructions can be found here:\n\nhttps://github.com/NVIDIA/nvidia-docker\n\nWe automatically add the necessary environment variable that will utilise all the features available on a GPU on the host. Once nvidia-docker is installed on your host you will need to re/create the docker container with the nvidia container runtime --runtime=nvidia and add an environment variable -e NVIDIA_VISIBLE_DEVICES=all (can also be set to a specific gpu's UUID, this can be discovered by running nvidia-smi --query-gpu=gpu_name,gpu_uuid --format=csv ). NVIDIA automatically mounts the GPU and drivers from your host into the emby docker.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8096:8096/tcp",
                "8920:8920/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/emby"
                },
                {
                    "container": "/data/tvshows",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                },
                {
                    "container": "/data/movies",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/movies"
                },
                {
                    "container": "/opt/vc/lib",
                    "bind": "/opt/vc/lib"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/emby-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "EmbyStat",
            "name": "embystat",
            "image": "linuxserver/embystat",
            "description": "Embystat is a personal web server that can calculate all kinds of statistics from your (local) Emby server. Just install this on your server and let him calculate all kinds of fun stuff.",
            "platform": "linux",
            "note": "Access the webui at <your-ip>:6555. Follow the setup wizard on initial install. Then configure the required services.",
            "restart_policy": "unless-stopped",
            "ports": [
                "6555:6555/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/embystat"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/embystat-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Endlessh",
            "name": "endlessh",
            "image": "linuxserver/endlessh",
            "description": "Endlessh is an SSH tarpit that very slowly sends an endless, random SSH banner. It keeps SSH clients locked up for hours or even days at a time. The purpose is to put your real SSH server on another port and then let the script kiddies get stuck in this tarpit instead of bothering a real server.",
            "platform": "linux",
            "note": "The app listens on the port mapped for ssh connections. To log to file, set the environment variable LOGFILE to true and map a volume for /config. The logs will be under /config/logs/endlessh.",
            "ports": [
                "22:2222/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/endlessh"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "MSDELAY",
                    "default": "10000",
                    "label": "optional"
                },
                {
                    "name": "MAXLINES",
                    "default": "32",
                    "label": "optional"
                },
                {
                    "name": "MAXCLIENTS",
                    "default": "4096",
                    "label": "optional"
                },
                {
                    "name": "LOGFILE",
                    "default": "false",
                    "label": "optional"
                },
                {
                    "name": "BINDFAMILY",
                    "default": "",
                    "label": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/endlessh.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "FIleZilla Client",
            "name": "filezilla",
            "image": "linuxserver/filezilla",
            "description": "FIleZilla Client is a fast and reliable cross-platform FTP, FTPS and SFTP client with lots of useful features and an intuitive graphical user interface.",
            "platform": "linux",
            "note": "The application can be accessed at:\n\n    http://yourhost:3000/\n\nBy default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:\n\n    http://yourhost:3000/?login=true\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/filezilla"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/filezilla-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Firefox",
            "name": "firefox",
            "image": "linuxserver/firefox",
            "description": "Firefox Browser, also known as Mozilla Firefox or simply Firefox, is a free and open-source web browser developed by the Mozilla Foundation and its subsidiary, the Mozilla Corporation. Firefox uses the Gecko layout engine to render web pages, which implements current and anticipated web standards.",
            "platform": "linux",
            "note": "The application can be accessed at:\n\n    http://yourhost:3000/\n\nBy default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:\n\n    http://yourhost:3000/?login=true\n",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/firefox"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "sysctls": [
                {
                    "shm_size": "1gb"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/firefox-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Folding@home",
            "name": "foldingathome",
            "image": "linuxserver/foldingathome",
            "description": "Folding@home is a distributed computing project for simulating protein dynamics, including the process of protein folding and the movements of proteins implicated in a variety of diseases. It brings together citizen scientists who volunteer to run simulations of protein dynamics on their personal computers. Insights from this data are helping scientists to better understand biology, and providing new opportunities for developing therapeutics.",
            "platform": "linux",
            "note": "This image sets up the Folding@home client. The interface is available at http://your-ip:7396.\n\nThe built-in webserver provides very basic control (ie. GPUs are only active when set to Medium or higher). For more fine grained control of individual devices, you can use the FAHControl app on a different device and connect remotely via port 36330 (no password).\n\nThere are a couple of minor issues with the webgui:\n\n    If you get an \"ERR_EMPTY_RESPONSE\" error when trying to access via IP, it's most likely due to a clash of cookies/cache. Try opening in an incgnito window.\n    If you're getting a constant refresh of the window but no display of info, try a force refresh via shft-F5 or ctrl-F5.\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "7396:7396/tcp",
                "/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/foldingathome"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/folding-at-home-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "FreshRSS",
            "name": "freshrss",
            "image": "linuxserver/freshrss",
            "description": "Freshrss is a free, self-hostable aggregator for rss feeds.",
            "platform": "linux",
            "note": "Access the webui set up wizard at http://serverIP:port\n\nFor external databases, create a user and database in your mysql/mariadb server (not root) and then follow the setup wizard in the webui. Use the IP address for \"host\" of your database server.\n\nAdditional extensions can be dropped into /config/www/freshrss/extensions and will be active after container restart.",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/freshrss"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/freshrss-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Grav",
            "name": "grav",
            "image": "linuxserver/grav",
            "description": "Grav is a Fast, Simple, and Flexible, file-based Web-platform.",
            "platform": "linux",
            "note": "For more information check out the Grav documentation (https://learn.getgrav.org/). Our image includes the grav-admin (https://github.com/getgrav/grav-plugin-admin) plugin.",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/grav"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/grav-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Grocy",
            "name": "grocy",
            "image": "linuxserver/grocy",
            "description": "Grocy is an ERP system for your kitchen! Cut down on food waste, and manage your chores with this brilliant utility.\n\nKeep track of your purchases, how much food you are wasting, what chores need doing and what batteries need charging with this proudly Open Source tool\n\nFor more information on grocy visit their website and check it out: https://grocy.info",
            "platform": "linux",
            "note": "Grocy is simple to get running. Configure the container with instructions below, start it, and you can then access it by visiting http://your.ip:9283 - once the page loads, you can log in with the default username and password of admin / admin",
            "restart_policy": "unless-stopped",
            "ports": [
                "9283:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/grocy"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/grocy.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Guacd",
            "name": "guacd",
            "image": "linuxserver/guacd",
            "description": "Guacd - Apache Guacamole is a clientless remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH. This container is only the backend server component needed to use The official or 3rd party HTML5 frontends.",
            "platform": "linux",
            "note": "This is a backend only service, to leverage Guacd server you need to use either the official Java frontend guacamole-client or an open source alterantive like guacamole-lite.",
            "restart_policy": "unless-stopped",
            "ports": [
                "4822:4822/tcp"
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/guacd.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Habridge",
            "name": "habridge",
            "image": "linuxserver/habridge",
            "description": "Habridge emulates Philips Hue API to other home automation gateways such as an Amazon Echo/Dot Gen 1 (gen 2 has issues discovering ha-bridge) or other systems that support Philips Hue. The Bridge handles basic commands such as \"On\", \"Off\" and \"brightness\" commands of the hue protocol. This bridge can control most devices that have a distinct API.",
            "platform": "linux",
            "note": "To set up the ha-bridge simply go to http://localhost:8080. Once you are in the webui you can add devices and configure ha-bridge to your liking.\n\nFor information on how to configure ha-bridge, go to their wiki at https://github.com/bwssytems/ha-bridge/wiki",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8076/tcp",
                "50000:50000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/habridge"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "SEC_KEY",
                    "default": "<Your Key To Encrypt Security Data>"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/habridge.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Headphones",
            "name": "headphones",
            "image": "linuxserver/headphones",
            "description": "Headphones is an automated music downloader for NZB and Torrent, written in Python. It supports SABnzbd, NZBget, Transmission, µTorrent and Blackhole.",
            "platform": "linux",
            "ports": [
                "8181:8181/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/headphones"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/music",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/music"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/headphones-banner.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Healthchecks",
            "name": "healthchecks",
            "image": "linuxserver/healthchecks",
            "description": "Healthchecks is a watchdog for your cron jobs. It's a web server that listens for pings from your cron jobs, plus a web interface.",
            "platform": "linux",
            "note": "Access the WebUI at http://serverIP:port",
            "ports": [
                "8000:8000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/healthchecks"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "SITE_ROOT",
                    "default": "<SITE_ROOT>",
                    "label": "",
                    "description": "The site's top-level URL and the port it listens to if differrent than 80 or 443 (e.g., https://healthchecks.example.com:8000)"
                },
                {
                    "name": "SITE_NAME",
                    "default": "<SITE_NAME>",
                    "description": "The site's name (e.g., \"Example Corp HealthChecks\")"
                },
                {
                    "name": "DEFAULT_FROM_EMAIL",
                    "default": "<DEFAULT_FROM_EMAIL>",
                    "description": "From email for alerts"
                },
                {
                    "name": "EMAIL_HOST",
                    "default": "<EMAIL_HOST>",
                    "description": "SMTP host"
                },
                {
                    "name": "EMAIL_PORT",
                    "default": "<EMAIL_PORT>",
                    "description": "SMTP port"
                },
                {
                    "name": "EMAIL_HOST_USER",
                    "default": "<EMAIL_HOST_USER>",
                    "description": "SMTP user"
                },
                {
                    "name": "EMAIL_HOST_PASSWORD",
                    "default": "<EMAIL_HOST_PASSWORD>",
                    "description": "SMTP password"
                },
                {
                    "name": "EMAIL_USE_TLS",
                    "default": "<True or False>",
                    "description": "Use TLS for SMTP (True or False)"
                },
                {
                    "name": "ALLOWED_HOSTS",
                    "default": "<ALLOWED_HOSTS>",
                    "description": "array of valid hostnames for the server [\"test.com\",\"test2.com\"] or \"*\""
                },
                {
                    "name": "SUPERUSER_EMAIL",
                    "default": "<SUPERUSER_EMAIL>",
                    "description": "Superuser email"
                },
                {
                    "name": "SUPERUSER_PASSWORD",
                    "default": "<SUPERUSER_PASSWORD>",
                    "description": "Superuser password"
                },
                {
                    "name": "REGENERATE_SETTINGS",
                    "default": "<True or False>",
                    "description": "Defaults to False. Set to true to always override the local_settings.py file with values from environment variables. Do not set to True if you have made manual modifications to this file."
                },
                {
                    "name": "SITE_LOGO_URL",
                    "default": "<SITE_LOGO_URL>",
                    "description": "Custom site logo URL"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/healthchecks-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Heimdall",
            "name": "heimdall",
            "image": "linuxserver/heimdall",
            "description": "Heimdall is a way to organise all those links to your most used web sites and web applications in a simple way. Simplicity is the key to Heimdall. Why not use it as your browser start page? It even has the ability to include a search bar using either Google, Bing or DuckDuckGo.",
            "platform": "linux",
            "note": "Adding password protection\n\nThis image now supports password protection through htpasswd. Run the following command on your host to generate the htpasswd file docker exec -it heimdall htpasswd -c /config/nginx/.htpasswd <username>. Replace ",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp",
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/heimdall"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/heimdall-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Home Assistant",
            "name": "homeassistant",
            "image": "linuxserver/homeassistant",
            "description": "Homeassistant is open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server.\n\nhomeassistant",
            "platform": "linux",
            "note": "The Webui can be found at http://your-ip:8123. Follow the wizard to set up Home Assistant.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8123:8123/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/homeassistant"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/home-assistant-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "HTPC Manager",
            "name": "htpcmanager",
            "image": "linuxserver/htpcmanager",
            "description": "Htpcmanager is a front end for many htpc related applications.",
            "platform": "linux",
            "note": "The webui is found at port 8085. Smartmontools and psutil have not been included, you can safely ignore the warning error in the log.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8085:8085/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/htpcmanager"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/htpcmanager-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "IPFS",
            "name": "ipfs",
            "image": "linuxserver/ipfs",
            "description": "Ipfs - A peer-to-peer hypermedia protocol designed to make the web faster, safer, and more open.",
            "platform": "linux",
            "note": "In order to push files beyond your local gateway you have to make sure port 4001 is forwarded to the internet. This is required for IPFS peers to reach in and grab your files so public gateways can serve them.\n\nAccess the webui at http://localhost , if not using localhost scroll to the bottom of the page and set the API Address setting to IE http://192.168.1.10:5001 , from there you can upload and manage files you push to IPFS. Your gateway to access IPFS files is http://localhost:8080/ipfs/YOUR-FILE-HASH-HERE . You can also simply use public IPFS gateways like:\n\n    Cloudflare - https://cloudflare-ipfs.com/ipfs/YOUR-FILE-HASH-HERE\n    IPFS.io - https://ipfs.io/ipfs/YOUR-FILE-HASH-HERE\n    Eternum.io - https://ipfs.eternum.io/ipfs/YOUR-FILE-HASH-HERE\n\nCloudflare is a solid option as they actually edge cache the files on their CDN so even if your node pinning the item goes down for periods of time their cache will last up to a month.\n\nFor more on using IPFS please read the docs here",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp",
                "4001:4001/tcp",
                "5001:5001/tcp",
                "8080:8080/tcp",
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/ipfs"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/ipfs-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Jackett",
            "name": "jackett",
            "image": "linuxserver/jackett",
            "description": "Jackett works as a proxy server: it translates queries from apps (Sonarr, SickRage, CouchPotato, Mylar, etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps.",
            "platform": "linux",
            "note": "The web interface is at <your-ip>:9117 , configure various trackers and connections to other apps there. More info at Jackett.\n\nDisable autoupdates in the webui to prevent jackett crashing, the image is refreshed when new versions are released.",
            "restart_policy": "unless-stopped",
            "ports": [
                "9117:9117/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/jackett"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "AUTO_UPDATE",
                    "default": "true",
                    "description": "optional",
                    "label": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/jackett-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Jellyfin",
            "name": "jellyfin",
            "image": "linuxserver/jellyfin",
            "description": "Jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby's 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it.",
            "platform": "linux",
            "note": "Webui can be found at http://<your-ip>:8096\n\nMore information can be found on the official documentation here (https://jellyfin.org/docs/general/quick-start.html)",
            "restart_policy": "unless-stopped",
            "ports": [
                "8096:8096/tcp",
                "8920:8920/tcp",
                "7359:7359/udp",
                "1900:1900/udp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/jellyfin"
                },
                {
                    "container": "/tvshows",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                },
                {
                    "container": "/movies",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/movies"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "devices": [
                {
                    "container": "/dev/dri",
                    "host": "/dev/dri"
                },
                {
                    "container": "/dev/vcsm",
                    "host": "/dev/vcsm"
                },
                {
                    "container": "/dev/vchiq",
                    "host": "/dev/vchiq"
                },
                {
                    "container": "/dev/video10",
                    "host": "/dev/video10"
                },
                {
                    "container": "/dev/video11",
                    "host": "/dev/video11"
                },
                {
                    "container": "/dev/video12",
                    "host": "/dev/video12"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/jellyfin-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Kanzi",
            "name": "kanzi",
            "image": "linuxserver/kanzi",
            "description": "Kanzi, formerly titled Kodi-Alexa, this custom skill is the ultimate voice remote control for navigating Kodi. It can do anything you can think of (100+ intents). This container also contains lexigram-cli to setup Kanzi with an Amazon Developer Account and automatically deploy it to Amazon.",
            "platform": "linux",
            "note": "Initial setup\n\n    Once you start the container for the first time, you need to perform some steps before use.\n    1.    Create an Amazon Developer Account here.\n    2.    Open a terminal in the /config directory of the docker container docker exec -itw /config kanzi bash\n    3.   Enter lexigram login --no-browser true to setup your AWS credentials and copy the URL into a browser, login to your Amazon Developer Account and copy/paste the resulting authorisation code back into the\n           Terminal and press enter.\n    4.   Edit the file kodi.config according to your local setup and this will be used by the included gunicorn server to respond to requests.\n    5.   Restart the container to automatically deploy the Kanzi skill.\n    6.   Reverse proxy this container with our LetsEncrypt container which contains preconfigured templates for reverse proxying the Kanzi container on either a subdomain or subfolder utilising Docker custom                                                                                         networking. Alternatively, if you already have an Nginx reverse proxy set up, you can use one of these location blocks to reverse proxy Kanzi to a subfolder or subdomain respectively.\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "8000:8000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/kanzi"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "URL_ENDPOINT",
                    "default": "https://server.com/kanzi/"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/kanzi-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "LazyLibrarian",
            "name": "lazylibrarian",
            "image": "linuxserver/lazylibrarian",
            "description": "Lazylibrarian is a program to follow authors and grab metadata for all your digital reading needs. It uses a combination of Goodreads Librarything and optionally GoogleBooks as sources for author info and book info. This container is based on the DobyTang fork.",
            "platform": "linux",
            "note": "Access the webui at http://<your-ip>:5299/home, for more information check out Lazylibrarian.",
            "restart_policy": "unless-stopped",
            "ports": [
                "5299:5299/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/lazylibrarian"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/books",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/books"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/lazylibrarian-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "LDAP-Auth",
            "name": "ldap-auth",
            "image": "linuxserver/ldap-auth",
            "description": "Ldap-auth software is for authenticating users who request protected resources from servers proxied by nginx. It includes a daemon (ldap-auth) that communicates with an authentication server, and a webserver daemon that generates an authentication cookie based on the user’s credentials. The daemons are written in Python for use with a Lightweight Directory Access Protocol (LDAP) authentication server (OpenLDAP or Microsoft Windows Active Directory 2003 and 2012).",
            "platform": "linux",
            "note": "\n    This container itself does not have any settings and it relies on the pertinent information passed through in http headers of incoming requests. Make sure that your webserver is set up with the right config.\n\n    Here's a sample config: https://github.com/nginxinc/nginx-ldap-auth/blob/master/nginx-ldap-auth.conf\n\n    Unlike the upstream project, this image encodes the cookie information with fernet, using a randomly generated key during container creation (or optionally user defined).\n\n    Also unlike the upstream project, this image serves the login page at /ldaplogin (as well as /login) to prevent clashes with reverse proxied apps that may also use /login for their internal auth.\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "8888:8888/tcp",
                "9000:9000/tcp"
            ],
            "env": [
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "FERNETKEY",
                    "default": "#optional"
                },
                {
                    "name": "CERTFILE",
                    "default": "#optional"
                },
                {
                    "name": "KEYFILE",
                    "default": "#optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/ldap-auth-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "LibreOffice",
            "name": "libreoffice",
            "image": "linuxserver/libreoffice",
            "description": "LSIO CI\n\nLibreOffice is a free and powerful office suite, and a successor to OpenOffice.org (commonly known as OpenOffice). Its clean interface and feature-rich tools help you unleash your creativity and enhance your productivity.",
            "platform": "linux",
            "note": "The application can be accessed at:\n\n    http://yourhost:3000/\n\nBy default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:\n\n    http://yourhost:3000/?login=true\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/libreoffice"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/libreoffice-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "LibreSpeed",
            "name": "librespeed",
            "image": "linuxserver/librespeed",
            "description": "Librespeed is a very lightweight Speedtest implemented in Javascript, using XMLHttpRequest and Web Workers. No Flash, No Java, No Websocket, No Bullshit.",
            "platform": "linux",
            "note": "Access the speedtest webui at http://SERVERIP. The results database can be accessed at http://SERVERIP/results/stats.php with the password set.\nThe default template used is based on example-singleServer-full.html. However, all templates are provided for reference at /config/www/. Feel free to customize /config/www/index.html as you like. Delete the file and restart to go back to the image default.\n\nYou can optionally place customized speedtest.js and speedtest_worker.js files under /config/www and they will supersede the defaults after a container start. Keep in mind that once you do so, they will no longer be updated. You can delete them and recreate the container to go back to the image defaults.\n\nIf you are setting up a mysql or postgresql database, you first need to import the tables into your database as described at the following link\nhttps://github.com/librespeed/speedtest/blob/master/doc.md#creating-the-database\n\nTo enable a custom results page set the environment variable CUSTOM_RESULTS=true and start (or restart) the container at least once for /config/www/results/index.php to be created and modify this file to your liking.",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/librespeed"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "PASSWORD",
                    "default": "PASSWORD"
                },
                {
                    "name": "CUSTOM_RESULTS",
                    "default": "false",
                    "description": "optional"
                },
                {
                    "name": "DB_TYPE",
                    "default": "sqlite",
                    "description": "optional"
                },
                {
                    "name": "DB_NAME",
                    "default": "DB_NAME",
                    "description": "optional"
                },
                {
                    "name": "DB_HOSTNAME",
                    "default": "DB_HOSTNAME",
                    "description": "optional"
                },
                {
                    "name": "DB_USERNAME",
                    "default": "DB_USERNAME",
                    "description": "optional"
                },
                {
                    "name": "DB_PASSWORD",
                    "default": "DB_PASSWORD",
                    "description": "optional"
                },
                {
                    "name": "DB_PORT",
                    "default": "DB_PORT",
                    "description": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/librespeed-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Lidarr",
            "name": "lidarr",
            "image": "linuxserver/lidarr",
            "description": "Lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.",
            "platform": "linux",
            "note": "Access the webui at <your-ip>:8686, for more information check out Lidarr.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8686:8686/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/lidarr"
                },
                {
                    "container": "/music",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/music"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/lidarr-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Limnoria",
            "name": "limnoria",
            "image": "linuxserver/limnoria",
            "description": "Limnoria A robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot.",
            "platform": "linux",
            "note": "If you do not have an existing config you will need to start the container and then run the following wizard command:\n\ndocker exec -it -w /config -u abc limnoria limnoria-wizard",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/limnoria"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/limnoria-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "MariaDB",
            "name": "mariadb",
            "image": "linuxserver/mariadb",
            "description": "Mariadb is one of the most popular database servers. Made by the original developers of MySQL.",
            "platform": "linux",
            "restart_policy": "unless-stopped",
            "ports": [
                "3306:3306/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/mariadb"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "default": "ROOT_ACCESS_PASSWORD"
                },
                {
                    "name": "MYSQL_DATABASE",
                    "default": "DB_NAME",
                    "description": "optional"
                },
                {
                    "name": "MYSQL_USER",
                    "default": "MYSQL_USER",
                    "description": "optional"
                },
                {
                    "name": "MYSQL_PASSWORD",
                    "default": "DB_PASSWORD",
                    "description": "optional"
                },
                {
                    "name": "REMOTE_SQL",
                    "default": "http://URL1/your.sql,https://URL2/your.sql",
                    "description": "optional"
                },
                {
                    "name": "",
                    "default": "",
                    "description": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/mariadb-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Medusa",
            "name": "medusa",
            "image": "linuxserver/medusa",
            "description": "Medusa is an automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.",
            "platform": "linux",
            "note": "Web interface is at <your ip>:8081.\n\nSet paths for downloads, tv-shows to match docker mappings via the webui, for more information check out Medusa (https://pymedusa.com/).",
            "restart_policy": "unless-stopped",
            "ports": [
                "8081:8081/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/medusa"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/tv",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000",
                    "label": ""
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/medusa-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Minetest",
            "name": "minetest",
            "image": "linuxserver/minetest",
            "description": "Minetest (server) is a near-infinite-world block sandbox game and a game engine, inspired by InfiniMiner, Minecraft, and the like.",
            "platform": "linux",
            "note": "ou can find the world maps, mods folder and config files in /config/.minetest.\n\nClient and server must be the same version, please browse the tags here to pull the appropriate version for your server:\n\nhttps://hub.docker.com/r/linuxserver/minetest/tags",
            "restart_policy": "unless-stopped",
            "ports": [
                "30000:30000/udp"
            ],
            "volumes": [
                {
                    "container": "/config/.minetest",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/minetest"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "CLI_ARGS",
                    "default": "gameid minetest\"",
                    "description": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/minetest-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Minisatip",
            "name": "minisatip",
            "image": "linuxserver/minisatip",
            "description": "Minisatip is a multi-threaded satip server version 1.2 that runs under Linux and it was tested with DVB-S, DVB-S2, DVB-T, DVB-T2, DVB-C, DVB-C2, ATSC and ISDB-T cards.\n\nminisatip",
            "platform": "linux",
            "note": "Best used in conjunction with tvheadend (https://github.com/linuxserver/docker-tvheadend)\n\nThere is no setup per se, other than adding your cards for passthrough.\n\nYou can then use your cards as DVB inputs in apps such as tvheadend.",
            "restart_policy": "unless-stopped",
            "ports": [
                "8875:8875/tcp",
                "554:554/tcp",
                "1900:1900/udp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/minisatip"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "RUN_OPTS",
                    "default": "<parameter>",
                    "description": "Specify specific run params for minisatip"
                }
            ],
            "devices": [
                {
                    "container": "/dev/dvb",
                    "host": "/dev/dvb"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/minisatip-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "mStream",
            "name": "mstream",
            "image": "linuxserver/mstream",
            "description": "mstream is a personal music streaming server. You can use mStream to stream your music from your home computer to any device, anywhere. There are mobile apps available for both Android and iPhone.",
            "platform": "linux",
            "note": "Access the webui at http://<your-ip>:3000\n\nSettings are adjusted through the web ui or via editing of config.json. For more information check out Mstream.",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/mstream"
                },
                {
                    "container": "/music",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/music"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/mstream-logo.webp",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Muximux",
            "name": "muximux",
            "image": "linuxserver/muximux",
            "description": "Muximux is a lightweight portal to view & manage your HTPC apps without having to run anything more than a PHP enabled webserver. With Muximux you don't need to keep multiple tabs open, or bookmark the URL to all of your apps.",
            "platform": "linux",
            "note": "Find the web interface at <your-ip>:80 , set apps you wish to use with muximux via the webui. More info: https://github.com/mescon/Muximux",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/muximux"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/muximux-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Mylar3",
            "name": "mylar3",
            "image": "linuxserver/mylar3",
            "description": "Mylar3 is an automated Comic Book downloader (cbr/cbz) for use with NZB and torrents written in python. It supports SABnzbd, NZBGET, and many torrent clients in addition to DDL.",
            "platform": "linux",
            "note": "The web ui for settings etc, is on <your-ip>:8090 For more detailed setup options, refer to Mylar3 (https://github.com/mylar3/mylar3)",
            "restart_policy": "unless-stopped",
            "ports": [
                "8090:8090/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/mylar3"
                },
                {
                    "container": "/comics",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/comics"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/mylar-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "MySQL Workbench",
            "name": "mysql-workbench",
            "image": "linuxserver/mysql-workbench",
            "description": "MySQL Workbench is a unified visual tool for database architects, developers, and DBAs. MySQL Workbench provides data modeling, SQL development, and comprehensive administration tools for server configuration, user administration, backup, and much more.",
            "platform": "linux",
            "note": "The application can be accessed at:\n\n    http://yourhost:3000/\n\nBy default the user/pass is abc/abc, if you change your password or want to login manually to the GUI session for any reason use the following link:\n\n    http://yourhost:3000/?login=true\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/mysql-workbench"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "cap_add": [
                "IPC_LOCK"
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/mysql-workbench-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Netbox",
            "name": "netbox",
            "image": "linuxserver/netbox",
            "description": "Netbox is an IP address management (IPAM) and data center infrastructure management (DCIM) tool. Initially conceived by the network engineering team at DigitalOcean, NetBox was developed specifically to address the needs of network and infrastructure engineers. It is intended to function as a domain-specific source of truth for network operations.",
            "platform": "linux",
            "note": "Netbox requires a postgres database and a redis instance.\n\nAccess the WebUI at  https://serverip:8000",
            "restart_policy": "unless-stopped",
            "ports": [
                "8000:8000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/netbox"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "SUPERUSER_EMAIL",
                    "default": "<SUPERUSER_EMAIL>"
                },
                {
                    "name": "SUPERUSER_PASSWORD",
                    "default": "<SUPERUSER_PASSWORD>"
                },
                {
                    "name": "ALLOWED_HOST",
                    "default": "<ALLOWED_HOST>"
                },
                {
                    "name": "DB_NAME",
                    "default": "<DB_NAME>"
                },
                {
                    "name": "DB_USER",
                    "default": "<DB_USER>"
                },
                {
                    "name": "DB_PASSWORD",
                    "default": "<DB_PASSWORD>"
                },
                {
                    "name": "DB_HOST",
                    "default": "<DB_HOST>"
                },
                {
                    "name": "DB_PORT",
                    "default": "<DB_PORT>"
                },
                {
                    "name": "REDIS_HOST",
                    "default": "<REDIS_HOST>"
                },
                {
                    "name": "REDIS_PORT",
                    "default": "<REDIS_PORT>"
                },
                {
                    "name": "REDIS_PASSWORD",
                    "default": "<REDIS_PASSWORD>"
                },
                {
                    "name": "REDIS_DB_TASK",
                    "default": "<REDIS_DB_TASK>"
                },
                {
                    "name": "REDIS_DB_CACHE",
                    "default": "<REDIS_DB_CACHE>"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/netbox-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Nextcloud",
            "name": "nextcloud",
            "image": "linuxserver/nextcloud",
            "description": "Nextcloud gives you access to all your files wherever you are.\n\nWhere are your photos and documents? With Nextcloud you pick a server of your choice, at home, in a data center or at a provider. And that is where your files will be. Nextcloud runs on that server, protecting your data and giving you access from your desktop or mobile devices. Through Nextcloud you also access, sync and share your existing data on that FTP drive at the office, a Dropbox or a NAS you have at home.\n\nnextcloud",
            "platform": "linux",
            "note": "Access the webui at https://<your-ip>:443, for more information check out Nextcloud.\n\nDocker image update and recreation of container alone won't update nextcloud version.\n\nIn order to update nextcloud version, you have two options, firstly make sure you are using the latest docker image,then either\n\n    Perform the in app gui update.\n    Use the CLI version by running docker exec -it nextcloud updater.phar (Both of these are described here)\n\nNote: Both occ and updater.phar can be run without prepending with sudo -u abc php or sudo -u www-data php\n\nIf you are not customizing our default nginx configuration you will need to remove the file:\n\n/config/nginx/site-confs/default\n\nThen restart the container to replace it with the latest one.\nCollaborative Editing\n\nNextcloud's built-in collaborative editing packages (Collabora/CODE and OnlyOffice) only work on x86_64 systems with glibc, and therefore they are not compatible with our images. You should create separate containers for them and set them up in Nextcloud with their respective connector addons.\n\nIf (auto) installed, those built-in packages may cause instability and should be removed.",
            "restart_policy": "unless-stopped",
            "ports": [
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/nextcloud"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/nextcloud-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Nginx",
            "name": "nginx",
            "image": "linuxserver/nginx",
            "description": "Nginx is a simple webserver with php support. The config files reside in /config for easy user customization.",
            "platform": "linux",
            "note": "Add your web files to /config/www for hosting.\nModify the nginx, php and site config files under /config as needed\nProtip: This container is best combined with a sql server, e.g. mariadb (https://hub.docker.com/r/linuxserver/mariadb/)",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp",
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/nginx"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/nginx-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "ngIRCd",
            "name": "ngircd",
            "image": "linuxserver/ngircd",
            "description": "Ngircd is a free, portable and lightweight Internet Relay Chat server for small or private networks, developed under the GNU General Public License (GPL). It is easy to configure, can cope with dynamic IP addresses, and supports IPv6, SSL-protected connections as well as PAM for authentication. It is written from scratch and not based on the original IRCd.",
            "platform": "linux",
            "note": "\n    To setup ngircd you will need to edit /config/ngircd.conf which is created the first time the container is run, edit the file and restart the container to implement any config changes.\n    For information see the ngircd site here (https://github.com/ngircd/ngircd/blob/master/doc/sample-ngircd.conf.tmpl)\n",
            "restart_policy": "unless-stopped",
            "ports": [
                "6667:6667/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/ngircd"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/ngircd-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "NZBGet",
            "name": "nzbget",
            "image": "linuxserver/nzbget",
            "description": "Nzbget is a usenet downloader, written in C++ and designed with performance in mind to achieve maximum download speed by using very little system resources.",
            "platform": "linux",
            "note": "Webui can be found at <your-ip>:6789 and the default login details (change ASAP) are\n\nlogin:nzbget, password:tegbzn6789",
            "restart_policy": "unless-stopped",
            "ports": [
                "6789:6789/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/nzbget"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/nzbget-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "NZBHydra2",
            "name": "nzbhydra2",
            "image": "linuxserver/nzbhydra2",
            "platform": "linux",
            "note": "Nzbhydra2 is a meta search application for NZB indexers, the \"spiritual successor\" to NZBmegasearcH, and an evolution of the original application NZBHydra.",
            "restart_policy": "unless-stopped",
            "ports": [
                "5076:5076/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/nzbhydra2"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/nzbhydra2-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Ombi",
            "name": "ombi",
            "image": "linuxserver/ombi",
            "description": "Ombi allows you to host your own Plex Request and user management system. If you are sharing your Plex server with other users, allow them to request new content using an easy to manage interface! Manage all your requests for Movies and TV with ease, leave notes for the user and get notification when a user requests something. Allow your users to post issues against their requests so you know there is a problem with the audio etc. Even automatically send them weekly newsletters of new content that has been added to your Plex server!",
            "platform": "linux",
            "note": "Access the webui at <your-ip>:3579. Follow the setup wizard on initial install. Then configure the required services.",
            "restart_policy": "unless-stopped",
            "ports": [
                "3579:3579/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/ombi"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/ombi-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "OpenSSH",
            "name": "openssh-server",
            "image": "linuxserver/openssh-server",
            "description": "Openssh-server is a sandboxed environment that allows ssh access without giving keys to the entire server. Giving ssh access via private key often means giving full access to the server. This container creates a limited and sandboxed environment that others can ssh into. The users only have access to the folders mapped and the processes running inside this container.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/openssh-server",
            "restart_policy": "unless-stopped",
            "ports": [
                "2222:2222/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/openssh-server"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000",
                    "description": "#optional",
                    "label": "#optional"
                },
                {
                    "name": "PGID",
                    "default": "1000",
                    "description": "#optional",
                    "label": ""
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna",
                    "description": "#optional",
                    "label": ""
                },
                {
                    "name": "PUBLIC_KEY",
                    "default": "<PUBLIC_KEY>",
                    "description": "#optional",
                    "label": ""
                },
                {
                    "name": "PUBLIC_KEY_FILE",
                    "default": "<PUBLIC_KEY_FILE>",
                    "description": "#optional",
                    "label": ""
                },
                {
                    "name": "PUBLIC_KEY_DIR",
                    "default": "<PUBLIC_KEY_DIR>",
                    "description": "#optional"
                },
                {
                    "name": "SUDO_ACCESS",
                    "default": "<SUDO_ACCESS>",
                    "description": "#optional",
                    "label": "optional"
                },
                {
                    "name": "PASSWORD_ACCESS",
                    "default": "<PASSWORD_ACCESS>",
                    "description": "#optional",
                    "label": "optional"
                },
                {
                    "name": "USER_PASSWORD",
                    "default": "<USER_PASSWORD>",
                    "description": "#optional",
                    "label": "optional"
                },
                {
                    "name": "USER_PASSWORD_FILE",
                    "default": "<USER_PASSWORD_FILE>",
                    "description": "#optional",
                    "label": "optional"
                },
                {
                    "name": "USER_NAME",
                    "default": "<USER_NAME>",
                    "description": "#optional",
                    "label": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/openssh-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "OSCam",
            "name": "oscam",
            "image": "linuxserver/oscam",
            "description": "Oscam is an Open Source Conditional Access Module software used for descrambling DVB transmissions using smart cards. It's both a server and a client.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/oscam",
            "restart_policy": "unless-stopped",
            "ports": [
                "8888:8888/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/oscam"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "devices": [
                {
                    "container": "/dev/ttyUSB0",
                    "host": "/dev/ttyUSB0"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/oscam-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Overseerr",
            "name": "overseerr",
            "image": "linuxserver/overseerr",
            "description": "Overseerr is a free and open source software application for managing requests for your media library.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/overseerr",
            "restart_policy": "unless-stopped",
            "ports": [
                "5055:5055/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/overseerr"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/overseerr-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Paperless-NG",
            "name": "paperless-ng",
            "image": "linuxserver/paperless-ng",
            "description": "Paperless-ng is an application by Daniel Quinn and contributors that indexes your scanned documents and allows you to easily search for documents and store metadata alongside your documents.\"\n\npaperless-ng",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/paperless-ng",
            "restart_policy": "unless-stopped",
            "ports": [
                "8000:8000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/paperless-ng"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "REDIS_URL",
                    "default": "#optional",
                    "description": "REDIS_URL",
                    "label": "Specify an external redis instance to use. Can optionally include a port (redis:6379) and/or db (redis/foo). If left blank or not included, will use a built-in redis instance. If changed after initial setup will also require manual modification of /config/settings.py"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/paperless-ng-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Papermerge",
            "name": "papermerge",
            "image": "linuxserver/papermerge",
            "description": "Papermerge is an open source document management system (DMS) primarily designed for archiving and retrieving your digital documents. Instead of having piles of paper documents all over your desk, office or drawers - you can quickly scan them and configure your scanner to directly upload to Papermerge DMS.\"",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/papermerge",
            "restart_policy": "unless-stopped",
            "ports": [
                "8000:8000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/papermerge"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "REDIS_URL",
                    "default": "#optional",
                    "description": "REDIS_URL",
                    "label": "Specify an external redis instance to use. Can optionally include a port (redis:6379) and/or db (redis/foo). If left blank or not included, will use a built-in redis instance. If changed after initial setup will also require manual modification of /config/settings.py"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/papermerge-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "PhotoShow",
            "name": "photoshow",
            "image": "linuxserver/photoshow",
            "description": "Photoshow is gallery software at its easiest, it doesn't even require a database.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/photoshow",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/photoshow"
                },
                {
                    "container": "/Pictures:ro",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/fotos"
                },
                {
                    "container": "/Thumbs",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/photoshow/thumbs"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/photoshow-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "phpMyAdmin",
            "name": "phpmyadmin",
            "image": "linuxserver/phpmyadmin",
            "description": "Phpmyadmin is a free software tool written in PHP, intended to handle the administration of MySQL over the Web. phpMyAdmin supports a wide range of operations on MySQL and MariaDB.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/phpmyadmin",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/phpmyadmin"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "PMA_ARBITRARY",
                    "default": "1",
                    "description": "PMA_ARBITRARY #optional",
                    "label": "Set to 1 to allow you to connect to any server. Setting to 0 will only allow you to connect to specified hosts (See Application Setup)"
                },
                {
                    "name": "PMA_ABSOLUTE_URI",
                    "default": "https://phpmyadmin.example.com",
                    "description": "PMA_ABSOLUTE_URI #optional",
                    "label": "Set the URL you will use to access the web frontend"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/phpmyadmin-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Pidgin",
            "name": "pidgin",
            "image": "linuxserver/pidgin",
            "description": "Pidgin is a chat program which lets you log into accounts on multiple chat networks simultaneously. This means that you can be chatting with friends on XMPP and sitting in an IRC channel at the same time.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/pidgin",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/pidgin"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/pidgin-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Piwigo",
            "name": "piwigo",
            "image": "linuxserver/piwigo",
            "description": "Piwigo is a photo gallery software for the web that comes with powerful features to publish and manage your collection of pictures.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/piwigo",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/piwigo"
                },
                {
                    "container": "/gallery",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/fotos"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/piwigo-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Pixapop",
            "name": "pixapop",
            "image": "linuxserver/pixapop",
            "description": "Pixapop is an open-source single page application to view your photos in the easiest way possible.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/pixapop",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/pixapop"
                },
                {
                    "container": "/photos",
                    "bind": " /srv/dev-disk-by-id-md-name-Nexus-0/privat/fotos"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "APP_USERNAME",
                    "default": "admin",
                    "description": "APP_USERNAME",
                    "label": "optional"
                },
                {
                    "name": "APP_PASSWORD",
                    "default": "admin",
                    "description": "APP_PASSWORD",
                    "label": "optional"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/pixapop-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Plex",
            "name": "plex",
            "image": "linuxserver/plex",
            "description": "Plex organizes video, music and photos from personal media libraries and streams them to smart TVs, streaming boxes and mobile devices. This container is packaged as a standalone Plex Media Server. has always been a top priority. Straightforward design and bulk actions mean getting things done faster.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/plex",
            "restart_policy": "unless-stopped",
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/plex"
                },
                {
                    "container": "/movies",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/movies"
                },
                {
                    "container": "/tv",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "PLEX_CLAIM",
                    "default": "#optional",
                    "description": "PLEX_CLAIM",
                    "label": "Optionally you can obtain a claim token from https://plex.tv/claim and input here. Keep in mind that the claim tokens expire within 4 minutes."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/plex-logo.png",
            "network_mode": "host",
            "type": 1
        },
        {
            "title": "ProjectSend",
            "name": "projectsend",
            "image": "linuxserver/projectsend",
            "description": "Projectsend is a self-hosted application that lets you upload files and assign them to specific clients that you create yourself. Secure, private and easy. No more depending on external services or e-mail to send those files.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/projectsend",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/projectsend"
                },
                {
                    "container": "/data",
                    "bind": " /srv/dev-disk-by-id-md-name-Nexus-0/privat/"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "MAX_UPLOAD",
                    "default": "5000",
                    "description": "MAX_UPLOAD",
                    "label": "To set maximum upload size (in MB), default if unset is 5000."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/projectsend-logo.jpg",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Prowlarr",
            "name": "prowlarr",
            "image": "linuxserver/prowlarr",
            "description": "Prowlarr is a indexer manager/proxy built on the popular arr .net/reactjs base stack to integrate with your various PVR apps. Prowlarr supports both Torrent Trackers and Usenet Indexers. It integrates seamlessly with Sonarr, Radarr, Lidarr, and Readarr offering complete management of your indexers with no per app Indexer setup required (we do it all).",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/prowlarr",
            "restart_policy": "unless-stopped",
            "ports": [
                "9696:9696/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/prowlarr"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/prowlarr-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Pwndrop",
            "name": "pwndrop",
            "image": "linuxserver/pwndrop",
            "description": "Pwndrop is a self-deployable file hosting service for sending out red teaming payloads or securely sharing your private files over HTTP and WebDAV.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/pwndrop",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/pwndrop"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "SECRET_PATH",
                    "default": "/pwndrop #optional",
                    "description": "SECRET_PATH",
                    "label": "Secret path for admin access. Defaults to /pwndrop. This parameter only takes effect during initial install; it can later be changed in the web gui."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/pwndrop-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Pydio-Cells",
            "name": "pydio-cells",
            "image": "linuxserver/pydio-cells",
            "description": "Pydio-cells is the nextgen file sharing platform for organizations. It is a full rewrite of the Pydio project using the Go language following a micro-service architecture.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/pydio-cells",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp",
                "33060:33060/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/pydio-cells"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "EXTERNALURL",
                    "default": "yourdomain.url",
                    "label": "The external url you would like to use to access Pydio Cells (Can be https://domain.url or https://IP:PORT).",
                    "description": "EXTERNALURL"
                },
                {
                    "name": "SERVER_IP",
                    "default": "0.0.0.0",
                    "description": "SERVER_IP",
                    "label": "Enter the LAN IP of the docker server. Required for local access by IP, added to self signed cert as SAN (not required if accessing only through reverse proxy)."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/pydio-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Pyload",
            "name": "pyload",
            "image": "linuxserver/pyload",
            "description": "Pyload is a Free and Open Source download manager written in Python and designed to be extremely lightweight, easily extensible and fully manageable via web.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/pyload",
            "restart_policy": "unless-stopped",
            "ports": [
                "8000:8000/tcp",
                "7227:7227/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/pyload"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/pyload-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Pylon",
            "name": "pylon",
            "image": "linuxserver/pylon",
            "description": "Pylon is a web based integrated development environment built with Node.js as a backend and with a supercharged JavaScript/HTML5 frontend, licensed under GPL version 3. This project originates from Cloud9 v2 project.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/pylon",
            "restart_policy": "unless-stopped",
            "ports": [
                "3131:3131/tcp"
            ],
            "volumes": [
                {
                    "container": "/code",
                    "bind": " /srv/dev-disk-by-id-md-name-Nexus-0/privat/"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "GITURL",
                    "default": "https://github.com/linuxserver/docker-pylon.git",
                    "description": "GITURL",
                    "label": "Specify a git repo to checkout on first startup"
                },
                {
                    "name": "PYUSER",
                    "default": "myuser #optional",
                    "description": "PYUSER",
                    "label": "Specify a basic auth user."
                },
                {
                    "name": "PYPASS",
                    "default": "mypass #optional",
                    "description": "PYPASS",
                    "label": "Specify a basic auth password."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/pylon-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "qBittorrent",
            "name": "qbittorrent",
            "image": "linuxserver/qbittorrent",
            "description": "The Qbittorrent project aims to provide an open-source software alternative to µTorrent. qBittorrent is based on the Qt toolkit and libtorrent-rasterbar library.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/qbittorrent",
            "restart_policy": "unless-stopped",
            "ports": [
                "6881:6881/tcp",
                "6881:6881/udp",
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/qbittorrent"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "WEBUI_PORT",
                    "default": "8080",
                    "label": "WEBUI_PORT"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/qbittorrent-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Quassel-Core",
            "name": "quassel-core",
            "image": "linuxserver/quassel-core",
            "description": "Quassel-core is a modern, cross-platform, distributed IRC client, meaning that one (or multiple) client(s) can attach to and detach from a central core.\n\nThis container handles the IRC connection (quasselcore) and requires a desktop client (quasselclient) to be used and configured. It is designed to be always on and will keep your identity present in IRC even when your clients cannot be online. Backlog (history) is downloaded by your client upon reconnection allowing infinite scrollback through time.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/quassel-core",
            "restart_policy": "unless-stopped",
            "ports": [
                "4242:4242/tcp",
                "113:10113/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/quassel-core"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "RUN_OPTS",
                    "default": "--config-from-environment #optional",
                    "label": "RUN_OPTS",
                    "description": "Custom CLI options for Quassel"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/quassel-core-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Quassel-Web",
            "name": "quassel-web",
            "image": "linuxserver/quassel-web",
            "description": "Quassel-web is a web client for Quassel. Note that a Quassel-Core instance is required, we have a container available here.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/quassel-web",
            "restart_policy": "unless-stopped",
            "ports": [
                "64080:64080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/quassel-web"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "",
                    "default": ""
                },
                {
                    "name": "QUASSEL_CORE",
                    "default": "192.168.1.10",
                    "label": "QUASSEL_CORE"
                },
                {
                    "name": "QUASSEL_PORT",
                    "default": "4242",
                    "label": "QUASSEL_PORT"
                },
                {
                    "name": "URL_BASE",
                    "default": "/quassel #optional",
                    "label": "URL_BASE",
                    "description": "Specify a url-base in reverse proxy setups ie. /quassel"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/quassel-core-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Radarr",
            "name": "radarr",
            "image": "linuxserver/radarr",
            "description": "Radarr - A fork of Sonarr to work with movies à la Couchpotato.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/radarr",
            "restart_policy": "unless-stopped",
            "ports": [
                "7878:7878/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/radarr"
                },
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/movies"
                },
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/radarr-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Raneto",
            "name": "raneto",
            "image": "linuxserver/raneto",
            "description": "Raneto - is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/raneto",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/raneto"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/raneto-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Rdesktop",
            "name": "rdesktop",
            "image": "linuxserver/rdesktop",
            "description": "Rdesktop - Ubuntu based containers containing full desktop environments in officially supported flavors accessible via RDP.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/rdesktop",
            "restart_policy": "unless-stopped",
            "ports": [
                "3389:3389/tcp"
            ],
            "volumes": [
                {
                    "container": "/var/run/docker.sock",
                    "bind": "/var/run/docker.sock"
                },
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/rdesktop"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "command": [
                "shm_size: \"1gb\""
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/rdesktop-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Readarr",
            "name": "readarr",
            "image": "linuxserver/readarr",
            "description": "Readarr - Book Manager and Automation (Sonarr for Ebooks)",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/readarr",
            "restart_policy": "unless-stopped",
            "ports": [
                "8787:8787/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/readarr"
                },
                {
                    "container": "/books",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/books"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/readarr-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Remmina",
            "name": "remmina",
            "image": "linuxserver/remmina",
            "description": "Remmina is a remote desktop client written in GTK, aiming to be useful for system administrators and travellers, who need to work with lots of remote computers in front of either large or tiny screens. Remmina supports multiple network protocols, in an integrated and consistent user interface. Currently RDP, VNC, SPICE, NX, XDMCP, SSH and EXEC are supported.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/remmina",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/remmina"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/remmina-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Requestrr",
            "name": "requestrr",
            "image": "linuxserver/requestrr",
            "description": "Requestrr is a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/requestrr",
            "restart_policy": "unless-stopped",
            "ports": [
                "4545:4545/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/requestrr"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/requestrr-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Resilio-Sync",
            "name": "resilio-sync",
            "image": "linuxserver/resilio-sync",
            "description": "Resilio-sync (formerly BitTorrent Sync) uses the BitTorrent protocol to sync files and folders between all of your devices. There are both free and paid versions, this container supports both. There is an official sync image but we created this one as it supports user mapping to simplify permissions for volumes.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/resilio-sync",
            "restart_policy": "unless-stopped",
            "ports": [
                "8888:8888/tcp",
                "55555:55555/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/resilio-sync"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/sync",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/resilio-sync-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Rsnapshot",
            "name": "rsnapshot",
            "image": "linuxserver/rsnapshot",
            "description": "Rsnapshot is a filesystem snapshot utility based on rsync. rsnapshot makes it easy to make periodic snapshots of local machines, and remote machines over ssh. The code makes extensive use of hard links whenever possible, to greatly reduce the disk space required.\"",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/rsnapshot",
            "restart_policy": "unless-stopped",
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/rsnapshot"
                },
                {
                    "container": "/.snapshots",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/rsnapshot/snapshots"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/rsnapshot/data"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/rsnapshot-logo.webp",
            "type": 1
        },
        {
            "title": "SABnzbd",
            "name": "sabnzbd",
            "image": "linuxserver/sabnzbd",
            "description": "Sabnzbd makes Usenet as simple and streamlined as possible by automating everything we can. All you have to do is add an .nzb. SABnzbd takes over from there, where it will be automatically downloaded, verified, repaired, extracted and filed away with zero human interaction.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/sabnzbd",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp",
                "9090:9090/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/sabnzbd"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/incomplete-downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads/intermediate"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/sabnzbd-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Scrutiny",
            "name": "scrutiny",
            "image": "linuxserver/scrutiny",
            "description": "Scrutiny WebUI for smartd S.M.A.R.T monitoring. Scrutiny is a Hard Drive Health Dashboard & Monitoring solution, merging manufacturer provided S.M.A.R.T metrics with real-world failure rates from Backblaze.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/scrutiny",
            "restart_policy": "unless-stopped",
            "ports": [
                "8080:8080/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/scrutiny"
                },
                {
                    "container": "/run/udev:ro",
                    "bind": "/run/udev"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "SCRUTINY_API_ENDPOINT",
                    "default": "http://localhost:8080",
                    "description": "# optional - API endpoint of the scrutiny UI. Do not change unless using as a remote collector",
                    "label": "SCRUTINY_API_ENDPOINT"
                },
                {
                    "name": " SCRUTINY_WEB",
                    "default": "true",
                    "label": " SCRUTINY_WEB",
                    "description": "# optional - Run the web service."
                },
                {
                    "name": "SCRUTINY_COLLECTOR",
                    "default": "true",
                    "label": "SCRUTINY_COLLECTOR",
                    "description": "# optional - Run the metrics collector."
                }
            ],
            "devices": [
                {
                    "container": "/dev/sda",
                    "host": "/dev/sda"
                },
                {
                    "container": "/dev/sdb",
                    "host": "/dev/sdb"
                },
                {
                    "container": "/dev/sdc",
                    "host": "/dev/sdc"
                },
                {
                    "container": "/dev/sdd",
                    "host": "/dev/sdd"
                },
                {
                    "container": "/dev/sde",
                    "host": "/dev/sde"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/scrutiny-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "SickChill",
            "name": "sickchill",
            "image": "linuxserver/sickchill",
            "description": "Sickchill is an Automatic Video Library Manager for TV Shows. It watches for new episodes of your favorite shows, and when they are posted it does its magic.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/sickchill",
            "restart_policy": "unless-stopped",
            "ports": [
                "8081:8081/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/sickchill"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/tv",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/sickchell-logo.jpg",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "SickGear",
            "name": "sickgear",
            "image": "linuxserver/sickgear",
            "description": "SickGear provides management of TV shows and/or Anime, it detects new episodes, links downloader apps, and more..",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/sickgear",
            "restart_policy": "unless-stopped",
            "ports": [
                "8081:8081/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/sickgear"
                },
                {
                    "container": "/tv",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/sickgear-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "SmokePing",
            "name": "smokeping",
            "image": "linuxserver/smokeping",
            "description": "Smokeping keeps track of your network latency. For a full example of what this application is capable of visit UCDavis.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/smokeping",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/smokeping"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/smokeping/data"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/smokeping-logo.webp",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Snapdrop",
            "name": "snapdrop",
            "image": "linuxserver/snapdrop",
            "description": "Snapdrop A local file sharing in your browser. Inspired by Apple's Airdrop.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/snapdrop",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp",
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/snapdrop"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/snapdrop-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Sonarr",
            "name": "sonarr",
            "image": "linuxserver/sonarr",
            "description": "Sonarr (formerly NZBdrone) is a PVR for usenet and bittorrent users. It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/sonarr",
            "restart_policy": "unless-stopped",
            "ports": [
                "8989:8989/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/sonarr"
                },
                {
                    "container": "/tv",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/sonarr-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "SQLite Browser",
            "name": "sqlitebrowser",
            "image": "linuxserver/sqlitebrowser",
            "description": "DB Browser for SQLite is a high quality, visual, open source tool to create, design, and edit database files compatible with SQLite.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/sqlitebrowser",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/sqlitebrowser"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/sqlite-browser-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "SyncLounge",
            "name": "synclounge",
            "image": "linuxserver/synclounge",
            "description": "Synclounge is a third party tool that allows you to watch Plex in sync with your friends/family, wherever you are.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/synclounge",
            "restart_policy": "unless-stopped",
            "ports": [
                "8088:8088/tcp"
            ],
            "env": [
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "AUTH_LIST",
                    "default": "plexuser1,plexuser2,email1,machineid1 #optional",
                    "label": "AUTH_LIST",
                    "description": "If set, only the users defined here and the users of the plex servers defined here will be able to access the server. Use e-mails, plex usernames and/or plex server machine ids, comma separated, no spaces."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/synclounge-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Syncthing",
            "name": "syncthing",
            "image": "linuxserver/syncthing",
            "description": "Syncthing replaces proprietary sync and cloud services with something open, trustworthy and decentralized. Your data is your data alone and you deserve to choose where it is stored, if it is shared with some third party and how it's transmitted over the Internet.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/syncthing",
            "restart_policy": "unless-stopped",
            "ports": [
                "8384:8384/tcp",
                "22000:22000/tcp",
                "22000:22000/udp",
                "21027:21027/udp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/syncthing"
                },
                {
                    "container": "/data1",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/data1"
                },
                {
                    "container": "/data2",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/privat/data2"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/syncthing-logo.png",
            "type": 1
        },
        {
            "title": "Syslog-NG",
            "name": "syslog-ng",
            "image": "linuxserver/syslog-ng",
            "description": "syslog-ng allows you to flexibly collect, parse, classify, rewrite and correlate logs from across your infrastructure and store or route them to log analysis tools.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/syslog-ng",
            "restart_policy": "unless-stopped",
            "ports": [
                "514:5514/udp",
                "601:6601/tcp",
                "6514:6514/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/syslog-ng"
                },
                {
                    "container": "/var/log",
                    "bind": "/path/to/log"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/syslog-ng-logo.png",
            "type": 1
        },
        {
            "title": "Taisun",
            "name": "taisun",
            "image": "linuxserver/taisun",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/taisun",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/var/run/docker.sock",
                    "bind": "/var/run/docker.sock"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/taisun-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Tautulli",
            "name": "tautulli",
            "image": "linuxserver/tautulli",
            "description": "Tautulli is a python based web application for monitoring, analytics and notifications for Plex Media Server.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/tautulli",
            "restart_policy": "unless-stopped",
            "ports": [
                "8181:8181/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/tautulli"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/tautulli-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "TheLounge",
            "name": "thelounge",
            "image": "linuxserver/thelounge",
            "description": "Thelounge (a fork of shoutIRC) is a web IRC client that you host on your own server.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/thelounge",
            "restart_policy": "unless-stopped",
            "ports": [
                "9000:9000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/thelounge"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/thelounge-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Transmission",
            "name": "transmission",
            "image": "linuxserver/transmission",
            "description": "Transmission is designed for easy, powerful use. Transmission has the features you want from a BitTorrent client: encryption, a web interface, peer exchange, magnet links, DHT, µTP, UPnP and NAT-PMP port forwarding, webseed support, watch directories, tracker editing, global and per-torrent speed limits, and more.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/transmission",
            "restart_policy": "unless-stopped",
            "ports": [
                "9091:9091/tcp",
                "51413:51413/tcp",
                "51413:51413/udp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/transmission"
                },
                {
                    "container": "/downloads",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                },
                {
                    "container": "/watch",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/transmission/watch"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "TRANSMISSION_WEB_HOME",
                    "default": "/combustion-release/ #optional",
                    "label": "TRANSMISSION_WEB_HOME",
                    "description": "Specify an alternative UI options are /combustion-release/, /transmission-web-control/, /kettu/ and /flood-for-transmission/."
                },
                {
                    "name": "USER",
                    "default": "username #optional",
                    "label": "USER",
                    "description": "Specify an optional username for the interface"
                },
                {
                    "name": "PASS",
                    "default": "password #optional",
                    "label": "PASS",
                    "description": "Specify an optional password for the interface"
                },
                {
                    "name": "WHITELIST",
                    "default": "iplist #optional",
                    "label": "WHITELIST",
                    "description": "Specify an optional list of comma separated ip whitelist. Fill rpc-whitelist setting."
                },
                {
                    "name": "HOST_WHITELIST",
                    "default": "dnsnane list #optional",
                    "label": "HOST_WHITELIST",
                    "description": " \tSpecify an optional list of comma separated dns name whitelist. Fill rpc-host-whitelist setting."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/transmission-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Tvheadend",
            "name": "TVheadend",
            "image": "linuxserver/tvheadend",
            "description": "Tvheadend works as a proxy server: is a TV streaming server and recorder for Linux, FreeBSD and Android supporting DVB-S, DVB-S2, DVB-C, DVB-T, ATSC, ISDB-T, IPTV, SAT>IP and HDHomeRun as input sources. Tvheadend offers the HTTP (VLC, MPlayer), HTSP (Kodi, Movian) and SAT>IP streaming. Multiple EPG sources are supported (over-the-air DVB and ATSC including OpenTV DVB extensions, XMLTV, PyXML).",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/tvheadend",
            "restart_policy": "unless-stopped",
            "ports": [
                "9981:9981/tcp",
                "9982:9982/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/tvheadend"
                },
                {
                    "container": "/recordings",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/tv/recordings"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "RUN_OPTS",
                    "default": "<run options here> #optional",
                    "label": "RUN_OPTS",
                    "description": "Optionally specify additional arguments to be passed. See Additional runtime parameters."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/tvheadend-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Ubooquity",
            "name": "ubooquity",
            "image": "linuxserver/ubooquity",
            "description": "Ubooquity is a free, lightweight and easy-to-use home server for your comics and ebooks. Use it to access your files from anywhere, with a tablet, an e-reader, a phone or a computer.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/ubooquity",
            "restart_policy": "unless-stopped",
            "ports": [
                "2202:2202/tcp",
                "2203:2203/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/ubooquity"
                },
                {
                    "container": "/books",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/books"
                },
                {
                    "container": "/comics",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/comics"
                },
                {
                    "container": "/files",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/downloads"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "MAXMEM",
                    "default": "1024",
                    "label": "MAXMEM",
                    "description": "To set the maximum memory. ( ex: set '1024' for 1GB )"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/ubooquity-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": " Unifi-Controller",
            "name": "unifi-controller",
            "image": "linuxserver/unifi-controller",
            "description": "LSIO CI\n\nThe Unifi-controller Controller software is a powerful, enterprise wireless software engine ideal for high-density client deployments requiring low latency and high uptime performance.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/unifi-controller",
            "restart_policy": "unless-stopped",
            "ports": [
                "3478:3478/udp",
                "10001:10001/udp",
                "8080:8080/tcp",
                "8443:8443/tcp",
                "1900:1900/udp",
                "6789:6789/tcp",
                "5514:5514/udp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/unifi-controller"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "MEM_LIMIT",
                    "default": "1024M #optional",
                    "label": "MEM_LIMIT",
                    "description": "Optionally change the Java memory limit (-Xmx) (default is 1024M)."
                },
                {
                    "name": "MEM_STARTUP",
                    "default": "1024M #optional",
                    "label": "MEM_STARTUP",
                    "description": "Optionally change the Java initial memory (-Xms) (default is 1024M)."
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/unifi-controller-logo.png",
            "type": 1
        },
        {
            "title": "WebGrab+Plus",
            "name": "webgrabplus",
            "image": "linuxserver/webgrabplus",
            "description": "Webgrabplus is a multi-site incremental xmltv epg grabber. It collects tv-program guide data from selected tvguide sites for your favourite channels.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/webgrabplus",
            "restart_policy": "unless-stopped",
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/webgrabplus"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/webgrabplus/data"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/webgrabplus-logo.jpg",
            "network_mode": "host",
            "type": 1
        },
        {
            "title": "Webtop",
            "name": "webtop",
            "image": "linuxserver/webtop",
            "description": "Webtop - Alpine and Ubuntu based containers containing full desktop environments in officially supported flavors accessible via any modern web browser.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/webtop",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/webtop"
                },
                {
                    "container": "/var/run/docker.sock",
                    "bind": "/var/run/docker.sock"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "SUBFOLDER",
                    "default": "/ #optional",
                    "label": "SUBFOLDER",
                    "description": "Specify a subfolder to use with reverse proxies, IE /subfolder/"
                }
            ],
            "command": [
                "--shm-size=\"1gb\""
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/webtop-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Wiki.js",
            "name": "wikijs",
            "image": "linuxserver/wikijs",
            "description": "Wikijs A modern, lightweight and powerful wiki app built on NodeJS.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/wikijs",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/wikijs"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/wikijs/data"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/wikijs-logo.jpg",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "WireGuard",
            "name": "wireguard",
            "image": "linuxserver/wireguard",
            "description": "WireGuard® is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN for running on embedded interfaces and super computers alike, fit for many different circumstances. Initially released for the Linux kernel, it is now cross-platform (Windows, macOS, BSD, iOS, Android) and widely deployable. It is currently under heavy development, but already it might be regarded as the most secure, easiest to use, and simplest VPN solution in the industry.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/wireguard",
            "restart_policy": "unless-stopped",
            "ports": [
                "51820:51820/udp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/wireguard"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "SERVERURL",
                    "default": "wireguard.domain.com #optional",
                    "label": "SERVERURL",
                    "description": "External IP or domain name for docker host. Used in server mode. If set to auto, the container will try to determine and set the external IP automatically"
                },
                {
                    "name": "SERVERPORT",
                    "default": "51820 #optional",
                    "label": "SERVERPORT",
                    "description": "External port for docker host. Used in server mode."
                },
                {
                    "name": "PEERS",
                    "default": "#optional",
                    "label": "PEERS",
                    "description": "Number of peers to create confs for. Required for server mode. Can be a list of names too: myPC,myPhone,myTablet..."
                },
                {
                    "name": "PEERDNS",
                    "default": "auto #optional",
                    "label": "PEERDNS",
                    "description": "DNS server set in peer/client configs (can be set as 8.8.8.8). Used in server mode. Defaults to auto, which uses wireguard docker host's DNS via included CoreDNS forward."
                },
                {
                    "name": "INTERNAL_SUBNET",
                    "default": "10.13.13.0 #optional",
                    "label": "INTERNAL_SUBNET",
                    "description": "Internal subnet for the wireguard and server and peers (only change if it clashes). Used in server mode."
                },
                {
                    "name": "ALLOWEDIPS",
                    "default": "0.0.0.0/0 #optional",
                    "label": "ALLOWEDIPS",
                    "description": "The IPs/Ranges that the peers will be able to reach using the VPN connection. If not specified the default value is: '0.0.0.0/0, ::0/0' This will cause ALL traffic to route through the VPN, if you want split tunneling, set this to only the IPs you would like to use the tunnel AND the ip of the server's WG ip, such as 10.13.13.1."
                }
            ],
            "sysctls": [
                {
                    "net.ipv4.conf.all.src_valid_mark": "1"
                }
            ],
            "cap_add": [
                "SYS_MODULE",
                "NET_ADMIN"
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/wireguard-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Wireshark",
            "name": "wireshark",
            "image": "linuxserver/wireshark",
            "description": "Wireshark is the world’s foremost and widely-used network protocol analyzer. It lets you see what’s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. Wireshark development thrives thanks to the volunteer contributions of networking experts around the globe and is the continuation of a project started by Gerald Combs in 1998.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/wireshark",
            "restart_policy": "unless-stopped",
            "ports": [
                "3000:3000/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/wireshark"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "cap_add": [
                "NET_ADMIN"
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/wireshark-logo.png",
            "network_mode": "host",
            "type": 1
        },
        {
            "title": "XBackBone",
            "name": "xbackbone",
            "image": "linuxserver/xbackbone",
            "description": "Xbackbone is a simple, self-hosted, lightweight PHP file manager that support the instant sharing tool ShareX and *NIX systems. It supports uploading and displaying images, GIF, video, code, formatted text, and file downloading and uploading. Also have a web UI with multi user management, past uploads history and search support.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/xbackbone",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp",
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/xbackbone"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/xbackbone-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "ZNC",
            "name": "znc",
            "image": "linuxserver/znc",
            "description": "Znc is an IRC network bouncer or BNC. It can detach the client from the actual IRC server, and also from selected channels. Multiple clients from different locations can connect to a single ZNC account simultaneously and therefore appear under the same nickname on IRC.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/znc",
            "restart_policy": "unless-stopped",
            "ports": [
                "6501:6501/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/znc"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "GUID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/znc-logo.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Chevereto",
            "name": "chevereto",
            "image": "linuxserver/chevereto",
            "description": "Chevereto is an image hosting software that allows you to create a beautiful and full-featured image hosting website on your own server. It's your hosting and your rules, so say goodbye to closures and restrictions.",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/chevereto",
            "restart_policy": "unless-stopped",
            "ports": [
                "80:80/tcp",
                "443:443/tcp"
            ],
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/chevereto"
                },
                {
                    "container": "/data",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/chevereto/data"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/chevereto.png",
            "network_mode": "bridge",
            "type": 1
        },
        {
            "title": "Chevereto-db",
            "name": "chevereto-db",
            "image": "linuxserver/mariadb",
            "description": "Database for Chevereto",
            "platform": "linux",
            "note": "https://hub.docker.com/r/linuxserver/chevereto",
            "restart_policy": "unless-stopped",
            "volumes": [
                {
                    "container": "/config",
                    "bind": "/srv/dev-disk-by-id-md-name-Nexus-0/appdata/chevereto-db"
                }
            ],
            "env": [
                {
                    "name": "PUID",
                    "default": "1000"
                },
                {
                    "name": "PGID",
                    "default": "1000"
                },
                {
                    "name": "TZ",
                    "default": "Europe/Vienna"
                },
                {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "default": "<yourrootpass>",
                    "label": "MYSQL_ROOT_PASSWORD"
                },
                {
                    "name": "MYSQL_DATABASE",
                    "default": "chevereto",
                    "label": "MYSQL_DATABASE"
                },
                {
                    "name": "MYSQL_USER",
                    "default": "chevereto",
                    "label": "MYSQL_USER"
                },
                {
                    "name": "MYSQL_PASSWORD",
                    "default": "<yourdbpass>",
                    "label": "MYSQL_PASSWORD"
                }
            ],
            "logo": "https://raw.githubusercontent.com/X015/linuxserver.io-portrainer-templates/main/logos/db-logo.png",
            "type": 1
        }
    ]
}
